#include "players.hpp"
#include <iostream>
int Goat::get_status() {
    return status_;
}

void Goat::set_status(int s) {
    status_ = s;
}

int Goat::throw_number() {
    if (get_status() == Status::hidden) {
        std::srand(static_cast<unsigned int>(std::time(0)));
        return std::rand() % 100 + 1;
    }
    else /*dead*/{ 
        std::srand(static_cast<unsigned int>(std::time(0)));
        return std::rand() % 50 + 1;
    }
}

int Wolf::throw_number()  {
    std::srand(static_cast<unsigned int>(std::time(0)) + getpid());
    return std::rand() % 100 + 1;
}

int Wolf::read_num_from_console() {
    std::string input;

    std::cout << "Enter wolf number: \n";
    std::cout << "Number: ";

    struct pollfd fds[1];
    fds[0].fd = STDIN_FILENO;
    fds[0].events = POLLIN;

    int result = poll(fds, 1, 3000);

    if (result == -1) {
        std::cerr << "Error in poll: " << strerror(errno) << std::endl;
        exit(EXIT_FAILURE);
    } else if (result == 0) {
        std::cout << "TIME IS OUT\n";
        int autogenerated_num = throw_number();
        std::cout << "Wolf`s generated num is:" << autogenerated_num << std::endl;
        return autogenerated_num;
    } else {
        if (fds[0].revents & POLLIN) {
            std::cin >> input;
            std::cout << "You entered: " << input << std::endl;
            int autogenerated_num = throw_number();
            try {
                int result = std::stoi(input);
                std::cout << "Conversion successful. Wolf`s num is: " << result << std::endl;
                return result;
            } catch (const std::invalid_argument& e) {
                std::cout << "Bad input(inv arg). Wolf`s auto-num is: " << autogenerated_num << std::endl;
                std::cerr << "Invalid argument: " << e.what() << std::endl;
                return autogenerated_num;
            } catch (const std::out_of_range& e) {
                std::cout << "Bad input(out of range). Wolf`s auto-num is: " << autogenerated_num << std::endl;
                std::cerr << "Out of range: " << e.what() << std::endl; 
                return autogenerated_num;
            }
        }
    }
    return 0;
}    